7-base_geometry.txt:

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Test 1: Normal case
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("integer", 12)

Test 2: empty string
    >>> bg.integer_validator("", 12)

Test 3: negative value
	>>> bg.integer_validator("negative", -3)
	Traceback (most recent call last):
	ValueError: negative must be greater than 0

Test 4: check area():
	>>> bg.area()
	Traceback (most recent call last):
	Exception: area() is not implemented

Test 5: with value 0
	>>> bg.integer_validator("zero", 0)
	Traceback (most recent call last):
	ValueError: zero must be greater than 0

Test 6:
    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test 7:
    >>> bg.integer_validator("tuple", (6,))
    Traceback (most recent call last):
    TypeError: age must be an integer

Test 8:
    >>> bg.integer_validator("string", "str")
    Traceback (most recent call last):
    TypeError: my_int must be an integer

Test 9:
    >>> bg.integer_validator("Nothing", None)
    Traceback (most recent call last):   
    TypeError: age must be an integer

Test 10:
    >>> bg.integer_validator("boolean", False)
    Traceback (most recent call last):
    TypeError: age must be an integer

Test 11:
    >>> bg.integer_validator("list", [20])
    Traceback (most recent call last):
    TypeError: age must be an integer

Test 12:
    >>> bg.integer_validator("age", {2,10})
    Traceback (most recent call last):
    TypeError: age must be an integer
